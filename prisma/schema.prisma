generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Invoice {
  id         Int       @id @default(autoincrement())
  userId     Int
  clientId   Int
  clientName String
  amount     Float
  dueDate    DateTime
  paid       Boolean   @default(false)
  createdAt  DateTime  @default(now())

  // Optional: add a status field for better filtering and clarity
  status     String?   @default("pending") // values can be "pending", "paid", "overdue"

  // Relations
  client     Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments   Payment[]

  // Indexes
  @@index([userId])
  @@unique([id, userId])
}


model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  clients   Client[]
  invoices  Invoice[]
}

model Client {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  invoices  Invoice[]
  @@index([userId])
  @@unique([id, userId])
}



model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  paidAt    DateTime @default(now())
  method    String   // e.g., "cash", "bank", "credit"
  note      String?  // optional notes
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId Int
}


